// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.POVButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final AmpScoreSys m_ampScoreSys = new AmpScoreSys();
    public final TrapSys m_trapSys = new TrapSys();
    public final LiftSys m_liftSys = new LiftSys();
    public final IntakeSys m_intakeSys = new IntakeSys();
    public final ShooterSys m_shooterSys = new ShooterSys();
    public final DriveTrainSys m_driveTrainSys = new DriveTrainSys();

// Joysticks
private final XboxController xboxController1 = new XboxController(1);
private final Joystick joystick1 = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Command 1", new Command1());
    SmartDashboard.putData("Command 2", new Command2());
    SmartDashboard.putData("Command 3", new Command3());
    SmartDashboard.putData("Command 4", new Command4());
    SmartDashboard.putData("Command 5", new Command5());
    SmartDashboard.putData("Command 6", new Command6());
    SmartDashboard.putData("Command 7", new Command7());
    SmartDashboard.putData("Sequential Command Group 1", new SequentialCommandGroup1());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton joystickButton1 = new JoystickButton(joystick1, 1);        
joystickButton1.onTrue(new Command1().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton joystickButton2 = new JoystickButton(joystick1, 1);        
joystickButton2.onTrue(new Command2().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton joystickButton3 = new JoystickButton(joystick1, 1);        
joystickButton3.onTrue(new Command3().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton joystickButton4 = new JoystickButton(joystick1, 1);        
joystickButton4.onTrue(new Command4().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton joystickButton5 = new JoystickButton(joystick1, 1);        
joystickButton5.onTrue(new Command5().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final POVButton pOVButton1 = new POVButton(joystick1, 0, 0);        
pOVButton1.onTrue(new Command6().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final POVButton pOVButton2 = new POVButton(joystick1, 0, 0);        
pOVButton2.onTrue(new Command7().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton1 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton1.onTrue(new AutonomousCommand().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton2 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton2.onTrue(new AutonomousCommand().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton3 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton3.onTrue(new SequentialCommandGroup1().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton4 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton4.onTrue(new SequentialCommandGroup1().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton5 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton5.onTrue(new SequentialCommandGroup1().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick1() {
        return joystick1;
    }

public XboxController getXboxController1() {
      return xboxController1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

